#pragma checksum "C:\My\Projects\new\mvc\Views\Registration\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1ed6f49d2e30473200628ca50b318ef1d6982a2b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Registration_Index), @"mvc.1.0.view", @"/Views/Registration/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\My\Projects\new\mvc\Views\_ViewImports.cshtml"
using mvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\My\Projects\new\mvc\Views\_ViewImports.cshtml"
using mvc.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1ed6f49d2e30473200628ca50b318ef1d6982a2b", @"/Views/Registration/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a6a06753573638890b0ff2d42042a0bcf031bf36", @"/Views/_ViewImports.cshtml")]
    public class Views_Registration_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\My\Projects\new\mvc\Views\Registration\Index.cshtml"
  Layout=null;

#line default
#line hidden
#nullable disable
            WriteLiteral("<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1ed6f49d2e30473200628ca50b318ef1d6982a2b3616", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <style>
        body {
            background-color: #364150;
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            color: #ddd;
        }

        h3 {
            text-align: center;
        }

        .frmPanel {
            display: flex;
            justify-content: center;


        }

        .frmPanel form {

            width: 500px;
            margin: 10px;
        }

        label {
            display: block;
            margin: 10px 0;

        }

        label:focus-within {
            color: cornflowerblue;

        }

        input,
        textarea {
            color: white;
            background-color: transparent;
            width: 100%;
            box-sizing: border-box;
            padding: 5px;
            border: none;
            border-bottom: 1px solid #ccc;
            outline:");
                WriteLiteral(@" none;
        }

        input:focus,
        textarea:focus {
            border-bottom: 1px solid cornflowerblue;
        }

        .green {
            border: none;
            padding: 10px;
            outline: none;
            color: #fff;
            background-color: #26C281;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer
        }

        .green:hover {

            background-color: hsl(155, 67%, 35%);
        }

        .isError {
            color: red;
            font-size: 12px;
        }
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1ed6f49d2e30473200628ca50b318ef1d6982a2b6248", async() => {
                WriteLiteral("\r\n    <div id=\"app\">\r\n        <h3>Регистрация</h3>\r\n        <div class=\"frmPanel\">\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1ed6f49d2e30473200628ca50b318ef1d6982a2b6610", async() => {
                    WriteLiteral(@"
                <fieldset style=""padding: 15px;"">
                    <legend>Компания</legend>
                    <label>Название: <input v-model=""company.name"" type=""text"" placeholder=""Введите имя""> </label>
                    <div class=""isError"" v-if=""compError.name""> {{compError.name}}</div>

                    <label>ИИН/БИН: <input maxlength=""12"" v-model=""company.xin"" type=""text""
                            placeholder=""Введите ИИН""></label>
                    <div class=""isError"" v-if=""compError.xin""> {{compError.xin}}</div>

                    <label>Телефон: <input v-mask=""'+7(###) ### ##-##'"" v-model=""company.phone"" type=""text""
                            placeholder=""Введите телефон""> </label>
                    <div class=""isError"" v-if=""compError.phone""> {{compError.phone}}</div>

                    <label>Email: <input v-model=""company.email"" type=""text"" placeholder=""Введите емэйл""> </label>
                    <div class=""isError"" v-if=""compError.email""> {{compError.emai");
                    WriteLiteral(@"l}}</div>

                    <label>Адрес:<textarea v-model=""company.address"" cols=""30"" rows=""5""
                            placeholder=""Введите адрес""></textarea> </label>
                    <div class=""isError"" v-if=""compError.address""> {{compError.address}}</div>
                </fieldset>

            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1ed6f49d2e30473200628ca50b318ef1d6982a2b9359", async() => {
                    WriteLiteral(@"
                <fieldset>
                    <legend>Директор</legend>
                    <label> Имя: <input v-model=""director.name"" type=""text"" placeholder=""Введите имя""> </label>
                    <div class=""isError"" v-if=""dirError.name""> {{dirError.name}}</div>

                    <label>Фамилия: <input v-model=""director.lastName"" type=""text"" placeholder=""Введите фамилию""></label>
                    <div class=""isError"" v-if=""dirError.lastName""> {{dirError.lastName}}</div>

                    <label>ИИН: <input maxlength=""12"" v-model=""director.iin"" type=""text"" placeholder=""Введите ИИН""> </label>
                    <div class=""isError"" v-if=""dirError.iin""> {{dirError.iin}}</div>

                    <label>Телефон: <input v-mask=""'+7(###) ### ##-##'"" v-model=""director.mobile"" type=""text"" placeholder=""Введите телефон""> </label>
                    <div class=""isError"" v-if=""dirError.mobile""> {{dirError.mobile}}</div>

                    <label>Логин: <input v-model=""director.login");
                    WriteLiteral(@""" type=""text"" placeholder=""Введите логин""> </label>
                    <div class=""isError"" v-if=""dirError.login""> {{dirError.login}}</div>

                    <label>Пароль: <input v-model=""director.password"" type=""password"" placeholder=""Введите пароль""> </label>
                    <div class=""isError"" v-if=""dirError.password""> {{dirError.password}}</div> 

                    <label>Обо мне :<textarea v-model=""director.aboutMe"" cols=""30"" rows=""3""
                        placeholder=""Введите инфу""></textarea> </label>
                <div class=""isError"" v-if=""dirError.aboutMe""> {{dirError.aboutMe}}</div>

                </fieldset>
            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"


        </div>
        <div style=""text-align: center;"">
            <button v-on:click=""registration()"" class=""green""> Регистрация</button>
        </div>



    </div>
    <script src=""https://cdn.jsdelivr.net/npm/vue/dist/vue.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/v-mask/dist/v-mask.min.js""></script>
    <script>
        Vue.use(VueMask.VueMaskPlugin);
        var app = new Vue({
            el: '#app',
            data: {
                company: {
                    name: '',
                    xin: '',
                    phone: '',
                    email: '',
                    address: ''
                },
                compError: {
                    name: '',
                    xin: '',
                    phone: '',
                    email: '',
                    address: ''

                },
                director: {
                    name:");
                WriteLiteral(@" '',
                    lastName: '',
                    iin: '',
                    mobile: '',
                    login: '',
                    password: '',
                    aboutMe: ''

                },
                dirError: {
                    name: '',
                    lastName: '',
                    iin: '',
                    mobile: '',
                    login: '',
                    password: '',
                    aboutMe: ''
                }


            },
            methods: {
                registration: async function () {
                    let er1 = this.IsError();
                    let er2 = this.IsErrorDir();
                     if (er1 == false && er2==false){
                        let dt = {company:this.company, director:this.director};
                        let resp = await axios.post('/Registration/Registr', dt);
                        alert(resp.data);
                     }
                   
                },
 ");
                WriteLiteral(@"               IsError: function () {
                    this.compError = {

                    };
                    if (!this.company.name) {
                        this.compError.name = ""введите имя"";

                    }
                    if (!this.company.xin) {
                        this.compError.xin = ""введите ИИН/БИН"";
                    } else {
                        var re = /^[0-9]{12}$/;
                        var t = re.test(this.company.xin);
                        if (!t) {
                            this.compError.xin = ""введите 12 чисел""
                        }
                    }
                    if (!this.company.phone) {
                        this.compError.phone = ""введите номер телефона"";

                    } else if (this.company.phone.length < 17) {
                        this.compError.phone = ""некорректный"";
                    }
                    if (!this.company.email) {
                        this.compError.email = ""введите ");
                WriteLiteral("email\";\r\n\r\n                    } else {\r\n                        let re = /[a-z]+");
                WriteLiteral(@"@[a-z]+\.[a-z]{2,3}$/
                        var t = re.test(this.company.email);
                        if (!t) {
                            this.compError.email = ""введите нормально""
                        }

                    }
                    if (!this.company.address) {
                        this.compError.address = ""введите номер адрес "";

                    }
                    return Object.keys(this.compError).length>0;
                },
                IsErrorDir: function () {
                    this.dirError = {
                    };
                    if (!this.director.name) {
                        this.dirError.name = ""введите имя"";
                    }
                    if (!this.director.lastName) {
                        this.dirError.lastName = ""введите фамилию"";
                    }
                    if (!this.director.iin) {
                        this.dirError.iin = ""введите ИИН"";
                        dirError = true;
              ");
                WriteLiteral(@"      } else {
                        var re = /^[0-9]{12}$/;
                        var t = re.test(this.director.iin);
                        if (!t) {
                            this.dirError.iin = ""введите 12 чисел""
                        }
                    }
                    if (!this.director.mobile) {
                        this.dirError.phone = ""введите номер телефона"";

                    } else if (this.director.mobile.length < 17) {
                        this.dirError.phone = ""некорректный"";
                    }

                   
                    if (!this.director.password) {
                        this.dirError.password = ""введите пароль"";
                    }
                    if (!this.director.login) {
                        this.dirError.login = ""введите логин"";
                    }
                    if (!this.director.aboutMe) {
                        this.dirError.aboutMe = ""введите инфу о себе"";
                    }

                ");
                WriteLiteral("    return Object.keys(this.dirError).length>0;\r\n\r\n                },\r\n\r\n\r\n            }\r\n        });\r\n    </script>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
